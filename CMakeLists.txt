## Project Properties
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(alright)

SET(APPLICATION_NAME "alright")
SET(APPLICATION_VERSION_STRING 0.2)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

##build Tests
set(BUILD_TESTING true CACHE BOOL "Enable building of tests.")

## Project Output Paths
SET(MAINFOLDER ${PROJECT_SOURCE_DIR})
SET(EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")

## Project Search Paths
LIST(APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
SET(CMAKE_MODULE_PATH "${MAINFOLDER}/cmake")
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")
FILE(GLOB_RECURSE ALLHEADERS "include/*.h")

INCLUDE_DIRECTORIES("${MAINFOLDER}/thirdParty/catch") #catch.hpp

## Project Dependencies

## boost include locations when using different boost
#SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ~/boost/include)
#SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ~/boost/lib)
#INCLUDE_DIRECTORIES(~/boost/include)
#LINK_DIRECTORIES(~/boost/lib)

## Project Dependencies
find_package(OpenSSL 1.1.1 REQUIRED)
INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIRS})
LINK_DIRECTORIES(${OPENSSL_LIBRARIES})

find_package(Boost 1.71.0 REQUIRED filesystem)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})


## Configure Files
FILE(GLOB_RECURSE CONFIGINPUTS1 include/*.h.in.cmake)
LIST(APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
FOREACH(CONFIGINPUT ${CONFIGINPUTS})
    STRING(REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
    CONFIGURE_FILE("${CONFIGINPUT}" "${CONFIGOUTPUT1}")
ENDFOREACH(CONFIGINPUT ${CONFIGINPUTS})

## Use compiler debugging flags per default
INCLUDE(CxxFlags)

#debug
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} -pthread -std=c++17")

#release
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} -pthread -std=c++17")

## Creating Binaries for examples

SET(PROJECT_LIBS ${OPENSSL_LIBRARIES} ${Boost_LIBRARIES})

SET(EXAMPLE1_NAME "server")
SET(EXAMPLE1_BIN ${EXAMPLE1_NAME})
ADD_EXECUTABLE(${EXAMPLE1_BIN} ${MAINFOLDER}/src/server.cpp ${MAINFOLDER}/src/app.cpp ${ALLHEADERS} )
TARGET_LINK_LIBRARIES(${EXAMPLE1_BIN} ${PROJECT_LIBS})
INSTALL(TARGETS ${EXAMPLE1_BIN} DESTINATION bin)

SET(EXAMPLE2_NAME "client")
SET(EXAMPLE2_BIN ${EXAMPLE2_NAME})
ADD_EXECUTABLE(${EXAMPLE2_BIN} ${MAINFOLDER}/src/client.cpp ${ALLHEADERS} )
TARGET_LINK_LIBRARIES(${EXAMPLE2_BIN} ${PROJECT_LIBS})
INSTALL(TARGETS ${EXAMPLE2_BIN} DESTINATION bin)


macro(create_test TARGET_NAME SOURCE DEPENDENCIES)
    add_executable(${TARGET_NAME} ${SOURCE})
    target_link_libraries(
        ${TARGET_NAME}
        ${DEPENDENCIES}
        catchMain
        )
endmacro()

if (BUILD_TESTING)
    ADD_LIBRARY(catchMain ./tests/00CatchMain.cpp)
    enable_testing()
    create_test(clientTest ./tests/clientTest.cpp "${PROJECT_LIBS}")
endif (BUILD_TESTING)
